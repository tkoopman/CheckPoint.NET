<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>ObjectMethods</Title>
      <Author>[USERNAME]</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>ObjectMethods</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>ClassName</ID>
          <ToolTip>Object Class Name</ToolTip>
          <Default>Object</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>Type</ID>
          <ToolTip>Object type</ToolTip>
          <Default>object</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[#region $ClassName$ Methods

/// <summary>
/// Deletes a $Type$.
/// </summary>
/// <param name="value">The name or UID to delete.</param>
public void Delete$ClassName$
    (
        string value,
        Ignore ignore = Delete.Defaults.ignore
    )
{
    Delete.Invoke
        (
            Session: this,
            Command: "delete-$Type$",
            Value: value,
            Ignore: ignore
        );
}

/// <summary>
/// Finds all $Type$s.
/// </summary>
/// <param name="detailLevel">The detail level to return.</param>
/// <param name="limit">The limit.</param>
/// <param name="offset">The offset.</param>
/// <param name="order">The order.</param>
/// <returns>NetworkObjectsPagingResults of $ClassName$s</returns>
public NetworkObjectsPagingResults<$ClassName$> FindAll$ClassName$s
    (
        DetailLevels detailLevel = FindAll.Defaults.DetailLevel,
        int limit = FindAll.Defaults.Limit,
        int offset = FindAll.Defaults.Offset,
        IOrder order = FindAll.Defaults.Order
    )
{
    return FindAll.Invoke<$ClassName$>
        (
            Session: this,
            Command: "show-$Type$s",
            DetailLevel: detailLevel,
            Limit: limit,
            Offset: offset,
            Order: order
        );
}

/// <summary>
/// Finds all $Type$s that match filter.
/// </summary>
/// <param name="session">The active session to management server.</param>
/// <param name="filter">The filter.</param>
/// <param name="ipOnly">if set to <c>true</c> will search objects by their IP address only, without involving the textual search.</param>
/// <param name="detailLevel">The detail level.</param>
/// <param name="limit">The limit.</param>
/// <param name="offset">The offset.</param>
/// <param name="order">The order.</param>
/// <returns>NetworkObjectsPagingResults of $ClassName$s</returns>
public NetworkObjectsPagingResults<$ClassName$> FindAll$ClassName$s
    (
        string filter,
        bool ipOnly = FindAll.Defaults.IPOnly,
        DetailLevels detailLevel = FindAll.Defaults.DetailLevel,
        int limit = FindAll.Defaults.Limit,
        int offset = FindAll.Defaults.Offset,
        IOrder order = FindAll.Defaults.Order
    )
{
    return FindAll.Invoke<$ClassName$>
        (
            Session: this,
            Type: "$Type$",
            Filter: filter,
            IPOnly: ipOnly,
            DetailLevel: detailLevel,
            Limit: limit,
            Offset: offset,
            Order: order
        );
}

/// <summary>
/// Finds a $Type$.
/// </summary>
/// <param name="value">The name or UID to find.</param>
/// <param name="detailLevel">The detail level of child objects to return.</param>
/// <returns>$ClassName$ object</returns>
public $ClassName$ Find$ClassName$
    (
        string value,
        DetailLevels detailLevel = Find.Defaults.DetailLevel
    )
{
    return Find.Invoke<$ClassName$>
        (
            Session: this,
            Command: "show-$Type$",
            Value: value,
            DetailLevel: detailLevel
        );
}

#endregion $ClassName$ Methods]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>